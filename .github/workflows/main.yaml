name: Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    env:
      CONTAINER_NAME: backend-${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Log into AWS ECR
        id: login-aws-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private
      - name: Set Environment Variables
        run: |
          echo "ECR_REGISTRY=${{ steps.login-aws-ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=${{ secrets.AWS_ECR_REPO }}" >> $GITHUB_ENV
          echo "BACKEND_IMAGE_TAG=backend-${{ github.sha }}" >> $GITHUB_ENV

      # LOGGING
      - name: Log Environment Variables
        run: |
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "ECR_REPOSITORY: $ECR_REPOSITORY"
          echo "BACKEND_IMAGE_TAG: $BACKEND_IMAGE_TAG"

      # Uses Dockerfile in api directory to build and push the backend image to AWS ECR
      - name: Build & Push Backend Docker Image to AWS ECR
        # in docker build, all steps in Dockerfile are followed to create final image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG ./api
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG

      - name: Fetch EC2 Instance IDs
        run: |
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=cwc-private-ec2-1,cwc-private-ec2-2" \
                      "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[?State.Name=='running'].[InstanceId]" \
            --output text | tr '\n' ' ')
          echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV
          echo "Fetched EC2 Instance IDs: $INSTANCE_IDS"

      # LOGGING
      - name: Log Fetched EC2 Instance IDs
        run: |
          echo "INSTANCE_IDS: $INSTANCE_IDS"

      - name: Fetch RDS Endpoint from Parameter Store
        run: |
          RDS_ENDPOINT=$(aws ssm get-parameter --name "/cwc/rds/endpoint" --query "Parameter.Value" --output text)
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV

      - name: Deploy to EC2 Instances
        run: |
          for instance_id in ${{ env.INSTANCE_IDS }}; do
            echo "Deploying to instance $instance_id"
            aws ssm send-command \
              --instance-ids $instance_id \
              --document-name "AWS-RunShellScript" \
              --comment "Deploy backend Docker image" \
              --parameters '{"commands":[
                "export ECR_REGISTRY='${{ steps.login-aws-ecr.outputs.registry }}'",
                "export ECR_REPOSITORY='${{ secrets.AWS_ECR_REPO }}'",
                "export BACKEND_IMAGE_TAG='backend-${{ github.sha }}'",
                "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY",
                "echo ECR_REGISTRY=$ECR_REGISTRY",
                "echo ECR_REPOSITORY=$ECR_REPOSITORY",
                "echo BACKEND_IMAGE_TAG=$BACKEND_IMAGE_TAG",
                "sudo systemctl restart docker",
                "docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG",
                "docker stop backend-container || true",
                "docker rm backend-container || true",
                "docker run -d --name backend-container -p 80:3005
                    -e DB_HOST='${{ env.RDS_ENDPOINT }}'
                    -e DB_PORT='${{ secrets.DB_PORT }}'
                    -e DB_USERNAME='${{ secrets.DB_USERNAME }}'
                    -e DB_PASSWORD='${{ secrets.DB_PASSWORD }}'
                    -e NODE_ENV='production'
                    -e DISABLE_DB=false $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG"
              ]}'
          done
