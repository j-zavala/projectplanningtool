name: Deploy

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Run the workflow with debug logging"
        required: true
        default: true

jobs:
  build-and-push-to-ecr:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Log into AWS ECR
        id: login-aws-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private
      - name: Set Environment Variables
        run: |
          echo "ECR_REGISTRY=${{ steps.login-aws-ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=${{ secrets.AWS_ECR_REPO }}" >> $GITHUB_ENV
          echo "BACKEND_IMAGE_TAG=backend-${{ github.sha }}" >> $GITHUB_ENV

      # Uses Dockerfile in api directory to build and push the backend image to AWS ECR
      - name: Build & Push Backend Docker Image to AWS ECR
        # in docker build, all steps in Dockerfile are followed to to create final image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG ./api
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG

      - name: Fetch EC2 Instance IDs
        run: |
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=cwc-private-ec2-1,cwc-private-ec2-2" \
                      "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[?State.Name=='running'].[InstanceId]" \
            --output text | tr '\n' ' ')
          echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV
          echo "Fetched EC2 Instance IDs: $INSTANCE_IDS"

      - name: Deploy to EC2 Instances
        env:
          ECR_REGISTRY: 637423619942.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: cwc-ecr
          IMAGE_TAG: ${{ github.sha }}
          CONTAINER_NAME: backend-${{ github.sha }}
        run: |
          aws ssm send-command \
            --targets "Key=InstanceIds,Values=${{ env.INSTANCE_IDS }}" \
            --document-name "AWS-RunShellScript" \
            --output text \
            --query "Command.CommandId" \
            --parameters '{
              "commands": [
                "echo \"Current containers:\"",
                "docker ps --format \"{{.Names}}\"",
                "echo \"Logging in to ECR...\"",
                "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY}",
                "echo \"Pulling new image...\"",
                "docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}",
                "echo \"Stopping and removing old containers...\"",
                "docker ps -a --format \"{{.Names}}\" | grep \"^backend-\" || echo \"No existing backend containers found\"",
                "docker ps -q --filter name=backend-* | xargs -r docker stop",
                "docker ps -aq --filter name=backend-* | xargs -r docker rm",
                "echo \"Starting new container...\"",
                "docker run -d --name ${CONTAINER_NAME} -p 3005:3005 ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}",
                "echo \"Containers after deployment:\"",
                "docker ps --format \"{{.Names}}\""
              ]
            }'
