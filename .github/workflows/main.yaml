name: Deploy Multiple Times

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO }}
  BACKEND_CONTAINER_NAME: backend-container
  FRONTEND_CONTAINER_NAME: frontend-container

jobs:
  build-and-deploy:
    name: Build and Deploy Docker Images
    runs-on: ubuntu-latest

    strategy:
      matrix:
        run_number:
          [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
          ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up environment variables
        run: |
          echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV
          echo "CACHE_TAG=$(date +%Y%m%d)-${{ github.run_id }}-${{ matrix.run_number }}-$TIMESTAMP" >> $GITHUB_ENV
          echo "BACKEND_IMAGE_TAG=backend-${{ github.sha }}-${{ github.run_id }}-${{ matrix.run_number }}-$TIMESTAMP" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE_TAG=frontend-${{ github.sha }}-${{ github.run_id }}-${{ matrix.run_number }}-$TIMESTAMP" >> $GITHUB_ENV

      - name: Check for existing images and pull if available
        run: |
          LATEST_BACKEND_TAG=$(aws ecr describe-images --repository-name $ECR_REPOSITORY --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[?starts_with(@, `backend-cache-`)] | [0]' --output text)
          LATEST_FRONTEND_TAG=$(aws ecr describe-images --repository-name $ECR_REPOSITORY --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[?starts_with(@, `frontend-cache-`)] | [0]' --output text)

          if [ "$LATEST_BACKEND_TAG" != "None" ] && docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$LATEST_BACKEND_TAG; then
            echo "BACKEND_CACHE_EXISTS=true" >> $GITHUB_ENV
            echo "BACKEND_CACHE_TAG=$LATEST_BACKEND_TAG" >> $GITHUB_ENV
          else
            echo "BACKEND_CACHE_EXISTS=false" >> $GITHUB_ENV
          fi

          if [ "$LATEST_FRONTEND_TAG" != "None" ] && docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$LATEST_FRONTEND_TAG; then
            echo "FRONTEND_CACHE_EXISTS=true" >> $GITHUB_ENV
            echo "FRONTEND_CACHE_TAG=$LATEST_FRONTEND_TAG" >> $GITHUB_ENV
          else
            echo "FRONTEND_CACHE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Build and measure time (with cache if available)
        run: |
          build_and_measure() {
            local image
