name: Deploy

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Run the workflow with debug logging"
        required: false
        default: false

jobs:
  build-and-push-to-ecr:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Log into AWS ECR
        id: login-aws-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private

      - name: Set Environment Variables
        run: |
          echo "ECR_REGISTRY=${{ steps.login-aws-ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=${{ secrets.AWS_ECR_REPO }}" >> $GITHUB_ENV
          echo "BACKEND_IMAGE_TAG=backend-${{ github.sha }}" >> $GITHUB_ENV

      # Build and Push Backend Docker Image
      - name: Build Backend Docker Image to AWS ECR
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG ./api
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG

      - name: Fetch EC2 Instance IDs
        id: fetch-ec2-instance-ids
        run: |
          echo "AWS CLI version:"
          aws --version

          echo "AWS configuration:"
          aws configure list

          echo "Checking region and credentials:"
          aws sts get-caller-identity

          echo "Listing all EC2 instances in region $AWS_REGION:"
          aws ec2 describe-instances --query "Reservations[].Instances[].[InstanceId,State.Name,Tags]" --output json | jq '.'

          echo "Fetching all running EC2 instance IDs:"
          INSTANCE_IDS=$(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" --query "Reservations[].Instances[].InstanceId" --output text)
          if [ -z "$INSTANCE_IDS" ]; then
            echo "No running instances found"
            exit 1
          fi
          echo "Matching instance IDs:"
          echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV

      - name: Deploy to EC2 via SSM
        run: |
          INSTANCE_IDS=$(echo "${{ env.INSTANCE_IDS }}" | tr '\t' ' ')
          IFS=' ' read -ra INSTANCE_IDS_ARRAY <<< "$INSTANCE_IDS"
          echo "INSTANCE_IDS: ${INSTANCE_IDS_ARRAY[*]}"
          INSTANCE_IDS_COMMA_SEPARATED=$(IFS=','; echo "${INSTANCE_IDS_ARRAY[*]}")
          echo "INSTANCE_IDS_COMMA_SEPARATED: $INSTANCE_IDS_COMMA_SEPARATED"
          command_id=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=InstanceIds,Values=$INSTANCE_IDS_COMMA_SEPARATED" \
            --comment "Deploy new Docker images" \
            --parameters commands='[
              "export AWS_DEFAULT_REGION='"$AWS_REGION"'",
              "aws ecr get-login-password --region '"$AWS_REGION"' | docker login --username AWS --password-stdin '"$ECR_REGISTRY"'",
              "docker pull '"$ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG"'",
              "docker rm -f backend || true",
              "docker run -d -p 80:3005 --name backend '"$ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG"'"
            ]' --output text --query "Command.CommandId")

          echo "Command ID: $command_id"

          for instance_id in "${INSTANCE_IDS_ARRAY[@]}"; do
            aws ssm wait command-executed \
              --command-id $command_id \
              --instance-id $instance_id

            invocation_output=$(aws ssm get-command-invocation --command-id $command_id --instance-id $instance_id --query "StandardOutputContent" --output text)
            echo "Standard Output for $instance_id: $invocation_output"
            invocation_error=$(aws ssm get-command-invocation --command-id $command_id --instance-id $instance_id --query "StandardErrorContent" --output text)
            echo "Standard Error for $instance_id: $invocation_error"

            if [[ "$invocation_error" != "" ]]; then
              echo "Command failed on instance $instance_id with error: $invocation_error"
              exit 1
            fi
          done

          commandOutput=$(aws ssm list-command-invocations --command-id $command_id --details)
          echo "Command Output: $commandOutput"
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          BACKEND_IMAGE_TAG: ${{ env.BACKEND_IMAGE_TAG }}
