name: Deploy

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Run the workflow with debug logging"
        required: false
        default: true

jobs:
  build-and-push-to-ecr:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Log into AWS ECR
        id: login-aws-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private
      - name: Set Environment Variables
        run: |
          echo "ECR_REGISTRY=${{ steps.login-aws-ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=${{ secrets.AWS_ECR_REPO }}" >> $GITHUB_ENV
          echo "BACKEND_IMAGE_TAG=backend-${{ github.sha }}" >> $GITHUB_ENV

      - name: Build & Push Backend Docker Image to AWS ECR
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG ./api
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG

      - name: Fetch EC2 Instance IDs
        id: fetch-ec2-instance-ids
        run: |
          echo "AWS CLI version:"
          aws --version

          echo "AWS configuration:"
          aws configure list

          echo "Checking region and credentials:"
          aws sts get-caller-identity

          echo "Listing all EC2 instances in region $AWS_REGION:"
          aws ec2 describe-instances --query "Reservations[].Instances[].[InstanceId,State.Name,Tags]" --output json | jq '.'

          echo "Fetching all running EC2 instance IDs:"
          INSTANCE_IDS=$(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" --query "Reservations[].Instances[].InstanceId" --output text)
          if [ -z "$INSTANCE_IDS" ]; then
            echo "No running instances found"
            exit 1
          fi
          echo "Matching instance IDs:"
          echo "$INSTANCE_IDS"
          echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV
