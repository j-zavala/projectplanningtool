name: Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push-to-ecr:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Log into AWS ECR
        id: login-aws-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private

      - name: Set Environment Variables
        run: |
          echo "ECR_REGISTRY=${{ steps.login-aws-ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=${{ secrets.AWS_ECR_REPO }}" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE_TAG=frontend-${{ github.sha }}" >> $GITHUB_ENV
          echo "BACKEND_IMAGE_TAG=backend-${{ github.sha }}" >> $GITHUB_ENV

      # Build and Push Frontend Docker Image
      - name: Build Frontend Docker Image to AWS ECR
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$FRONTEND_IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$FRONTEND_IMAGE_TAG

      # Build and Push Backend Docker Image
      - name: Build Backend Docker Image to AWS ECR
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG ./api
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG

      - name: Fetch EC2 Instance IDs
        id: fetch-ec2-instance-ids
        run: |
          INSTANCE_IDS=$(aws ec2 describe-instances --filters "Name=tag:Role,Values=backend-frontend" --query "Reservations[].Instances[].InstanceId" --output text)
          if [ -z "$INSTANCE_IDS" ]; then
            echo "No instances found with the specified tag."
            exit 1
          fi
          echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV

      - name: Deploy to EC2 via SSM
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=${{ env.INSTANCE_IDS }}" \
            --parameters 'commands=["chmod +x scripts/update_containers.sh", "scripts/update_containers.sh $ECR_REGISTRY $ECR_REPOSITORY $FRONTEND_IMAGE_TAG $BACKEND_IMAGE_TAG"]' \
            --comment "Deploy new Docker images"
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          FRONTEND_IMAGE_TAG: ${{ env.FRONTEND_IMAGE_TAG }}
          BACKEND_IMAGE_TAG: ${{ env.BACKEND_IMAGE_TAG }}
          INSTANCE_IDS: ${{ env.INSTANCE_IDS }}
