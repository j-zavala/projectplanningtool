name: Deploy

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO }}
  BACKEND_CONTAINER_NAME: backend-container
  FRONTEND_CONTAINER_NAME: frontend-container

jobs:
  build-and-deploy:
    name: Build and Deploy Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up environment variables
        run: |
          echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV
          echo "BACKEND_IMAGE_TAG=backend-${{ github.sha }}-${{ github.run_number }}-${{ env.TIMESTAMP }}" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE_TAG=frontend-${{ github.sha }}-${{ github.run_number }}-${{ env.TIMESTAMP }}" >> $GITHUB_ENV

      - name: Build and push Docker images
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG ./api
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$FRONTEND_IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$FRONTEND_IMAGE_TAG

      - name: Fetch EC2 Instance IDs
        run: |
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=cwc-private-ec2-1,cwc-private-ec2-2" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[?State.Name=='running'].[InstanceId]" \
            --output text | tr '\n' ' ')
          echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV

      - name: Fetch RDS Endpoint
        run: |
          RDS_ENDPOINT=$(aws ssm get-parameter --name "/cwc/rds/endpoint" --with-decryption --query "Parameter.Value" --output text)
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV
          echo "RDS_HOST=$(echo $RDS_ENDPOINT | cut -d':' -f1)" >> $GITHUB_ENV
          echo "RDS_PORT=$(echo $RDS_ENDPOINT | cut -d':' -f2)" >> $GITHUB_ENV

      - name: Deploy to EC2 Instances
        env:
          BACKEND_ENV: >-
            NODE_ENV=production
            DB_HOST=${{ env.RDS_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            DISABLE_DB=false
            DB_SSL=true
        run: |
          deploy_container() {
            local instance_id=$1
            local container_name=$2
            local image_tag=$3
            local port_mapping=$4
            local env_vars=$5

            # Properly format env vars for docker run command
            local formatted_env_vars=""
            if [ -n "$env_vars" ]; then
              formatted_env_vars=$(echo "$env_vars" | sed 's/^/-e /' | sed 's/ / -e /g')
            fi

            aws ssm send-command \
              --instance-ids "$instance_id" \
              --document-name "AWS-RunShellScript" \
              --comment "Deploy $container_name" \
              --parameters '{
                "commands": [
                  "aws ecr get-login-password --region '"$AWS_REGION"' | docker login --username AWS --password-stdin '"$ECR_REGISTRY"'",
                  "docker pull '"$ECR_REGISTRY/$ECR_REPOSITORY:$image_tag"'",
                  "docker stop '"$container_name"' || true",
                  "docker rm '"$container_name"' || true",
                  "docker run -d --name '"$container_name"' '"$port_mapping"' '"$formatted_env_vars"' '"$ECR_REGISTRY/$ECR_REPOSITORY:$image_tag"'",
                  "docker logs '"$container_name"'"
                ]
              }' \
              --output text
          }

          for instance_id in $INSTANCE_IDS; do
            deploy_container "$instance_id" "$BACKEND_CONTAINER_NAME" "$BACKEND_IMAGE_TAG" "-p 3001:3005" "$BACKEND_ENV"
            deploy_container "$instance_id" "$FRONTEND_CONTAINER_NAME" "$FRONTEND_IMAGE_TAG" "-p 80:3000" ""
          done
